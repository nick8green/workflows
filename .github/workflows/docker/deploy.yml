name: Deploy docker app

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'Image to deploy'
        required: true
        type: string
      name:
        description: 'Name of the container'
        required: true
        type: string
      network:
        description: 'Network to connect the container to'
        required: true
        type: string
      options:
        description: 'Additional options to pass to the container on startup'
        required: false
        type: string
      version:
        default: 'latest'
        description: 'Version to deploy'
        type: string
        required: true
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      name:
        required: true
        type: string
      version:
        required: true
        type: string
    secrets:
      host:
        required: false
      key:
        required: false
      options:
        required: false
      network:
        required: true
      token:
        required: false
      user:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH (default)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.key || secrets.PRIVATE_KEY }}

      - name: Deploy to VPS
        env:
          HOST: ${{ secrets.host || secrets.HOST_IP }}
          USERNAME: ${{ secrets.user || secrets.HOST_USER }}

          DOCKER_IMAGE: ${{ inputs.image }}
          DOCKER_NAME: ${{ inputs.name }}
          DOCKER_NETWORK: ${{ secrets.network || inputs.network }}
          DOCKER_OPTIONS: ${{ secrets.options || inputs.options }}

          REGISTRY_USER: nick8green
          REGISTRY_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}
          DOCKER_VERSION: ${{ inputs.version }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$HOST << EOF
            # Login to container registry
            echo $REGISTRY_TOKEN | docker login ghcr.io -u $REGISTRY_USER --password-stdin

            # Create Docker network if it doesn't exist
            docker network create $DOCKER_NETWORK || true

            # Pull the relevant Docker image
            docker pull $DOCKER_IMAGE:$DOCKER_VERSION

            # Stop and remove any existing container if it exists
            if [ \$(docker ps -q -f name=$DOCKER_NAME) ]; then
              docker stop $DOCKER_NAME
            fi

            if [ \$(docker ps -aq -f name=$DOCKER_NAME) ]; then
              docker rm $DOCKER_NAME
            fi

            # Run the container with the required port mapping and environment variables
            docker run -d --restart=always --name $DOCKER_NAME --network $DOCKER_NETWORK $DOCKER_OPTIONS $DOCKER_IMAGE:$DOCKER_VERSION

            # Clean up
            rm ~/.docker/config.json
          EOF
