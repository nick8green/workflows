name: cleanup old GHCR images
on:
  workflow_call:
    inputs:
      days:
        default: 30
        description: 'Days to keep images'
        required: false
        type: number
      pattern:
        default: ''
        description: 'Pattern to match tags against'
        required: false
        type: string
    secrets:
      token:
        required: true

jobs:
  cleanup:
    env:
      REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.token }}
      OWNER: ${{ github.actor}}
      KEEP_DAYS: ${{ inputs.days }}
    runs-on: ubuntu-latest
    steps:
      - name: process images
        run: |
          # Determine if user or org
          OWNER_TYPE=$(gh api "repos/$REPO" -q '.owner.type')

          # Determine API base
          if [[ "$OWNER_TYPE" == "Organization" ]]; then
            PACKAGE_LIST_ENDPOINT="orgs/$OWNER/packages?package_type=container"
            PACKAGE_VERSIONS_ENDPOINT="orgs/$OWNER/packages/container"
          else
            PACKAGE_LIST_ENDPOINT="users/$OWNER/packages?package_type=container"
            PACKAGE_VERSIONS_ENDPOINT="users/$OWNER/packages/container"
          fi

          # Get all container packages
          REPO_NAME=$(basename "$REPO")
          ALL_PACKAGES=$(gh api "$PACKAGE_LIST_ENDPOINT" -q '.[].name')
          PACKAGES=$(echo "$ALL_PACKAGES" | grep "$REPO_NAME" || true)

          if [ -z "$PACKAGES" ]; then
            echo "No packages found matching '$REPO_NAME'"
            exit 0
          fi

          cutoff_date=$(date -d "-$KEEP_DAYS days" +%s)

          for PACKAGE_NAME in $PACKAGES; do
            echo "üßº Checking package: $PACKAGE_NAME"

            ENCODED_PACKAGE_NAME=$(jq -rn --arg pkg "$PACKAGE_NAME" '$pkg|@uri')

            VERSIONS=$(gh api "$PACKAGE_VERSIONS_ENDPOINT/$ENCODED_PACKAGE_NAME/versions" --paginate \
                      -q '.[] | {id: .id, tags: .metadata.container.tags, created: .created_at}')

            if [ -z "$VERSIONS" ]; then
              echo "No versions found for package $PACKAGE_NAME"
              continue
            fi
            echo "Found versions for $PACKAGE_NAME: $(echo "$VERSIONS" | jq -r '.id')"

            echo "$VERSIONS" | jq -c '.' | while read -r image; do
              ID=$(echo "$image" | jq -r '.id')
              CREATED=$(date --date="$(echo "$image" | jq -r '.created')" +%s)
              TAGS=$(echo "$image" | jq -r '.tags[]' 2>/dev/null || true)

              # Default keep if nothing breaks
              should_delete=true

              for TAG in $TAGS; do
                if [[ "$TAG" == "latest" ]]; then
                  echo "‚Ü©Ô∏è Skipping latest tag"
                  should_delete=false
                  break
                fi

                if [[ "$TAG" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "‚úÖ Semver tag $TAG ‚Äî keeping"
                  should_delete=false
                  break
                fi
              done

              if $should_delete && [ "$CREATED" -lt "$cutoff_date" ]; then
                echo "üóëÔ∏è Deleting version $ID (tags: $TAGS)"
                gh api --method DELETE "$PACKAGE_VERSIONS_ENDPOINT/$ENCODED_PACKAGE_NAME/versions/$ID" || \
                  echo "‚ö†Ô∏è Failed to delete version $ID (might already be deleted or inaccessible)"

              else
                echo "üì¶ Keeping recent or protected version (ID: $ID)"
              fi
            done
          done
