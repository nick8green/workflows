name: build and publish application image

on:
  workflow_call:
    inputs:
      args:
        default: ''
        description: 'Additional arguments to pass to the build'
        required: false
        type: string
      context:
        default: '.'
        description: 'Path to the build context'
        required: false
        type: string
      file:
        default: './Dockerfile'
        description: 'Path to the Dockerfile'
        required: false
        type: string
      reference:
        description: 'Reference to the image'
        required: true
        type: string
      registry:
        default: 'ghcr.io'
        description: 'Registry to push to'
        required: false
        type: string
      platform:
        default: 'linux/arm64,linux/amd64'
        description: 'Platform(s) to build for'
        required: false
        type: string
# Supported platforms:
#   - linux/amd64
#   - linux/arm/v7
#   - linux/arm64/v8
#   - linux/ppc64le
#   - linux/s390x
      push:
        default: true
        description: 'Push to registry'
        required: false
        type: boolean
      tag:
        description: 'Tag for the image'
        required: false
        type: string
      timeout:
        default: 10
        description: 'Timeout in minutes'
        required: false
        type: number
      user:
        default: ${{ github.actor }}
        description: 'Username for the registry'
        required: false
        type: string
    secrets:
      password:
        description: 'Password for the registry. PAT for GitHub (with: read and write access to packages), or password for Docker Hub'
        required: true
      token:
        description: 'GitHub token in case the image wants it'
        required: false
      snyk:
        description: 'Snyk token for vulnerability scanning'
        required: false
      docker:
        description: 'Docker password for Docker Scout'
        required: false

jobs:
  docker:
    name: 🏗️ build and publish image
    outputs:
      image: ${{ steps.meta.outputs.labels }}
      tag: ${{ steps.meta.outputs.tags }}
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 login to docker hub
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.user }}
          password: ${{ secrets.password }}

      - name: 📋 docker meta data
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ inputs.registry }}/${{ inputs.reference }}
          # list of labels to apply to the image
          labels: |
            org.opencontainers.image.authors=${{ inputs.user }}
            org.opencontainers.image.created=${{ github.event.repository.created_at }}
            org.opencontainers.image.description=${{ inputs.reference }} image from ${{ github.repository }} by ${{ github.actor }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=GitHub Actions
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            ${{ inputs.tag && format('type=raw,value={0}', inputs.tag) || '' }}
            type=raw,value=cache

      - name: 🧱 set up qemu
        uses: docker/setup-qemu-action@v3

      - name: 🧱 set up docker buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: 🏗️ build and push
        uses: docker/build-push-action@v6
        with:
          build-args: ${{ inputs.args }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          # cache-from: type=registry,ref=${{ inputs.registry }}/${{ inputs.reference }}:cache
          # cache-to: type=inline
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platform }}
          provenance: false
          push: ${{ inputs.push }}
          sbom: false
          secrets: |
            GH_TOKEN=${{ secrets.token }}
          tags: ${{ steps.meta.outputs.tags }}

      # - name: 🏷️ tag release image
      #   if: ${{ env.BRANCH_NAME == 'release' }}
      #   run: docker tag ghcr.io/${{ github.repository }}:${{ env.BRANCH_NAME }} ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.tag }}

      # - name: 🏷️ tag latest image
      #   if: ${{ env.BRANCH_NAME == 'main' }}
      #   run: docker tag ghcr.io/${{ github.repository }}:${{ env.BRANCH_NAME }} ghcr.io/${{ github.repository }}:latest

      - run: |
          rsync -a --remove-source-files /tmp/.buildx-cache-new/ /tmp/.buildx-cache/
          rm -rf /tmp/.buildx-cache-new
    timeout-minutes: ${{ inputs.timeout }}

  # scount:
  #   runs-on: ubuntu-latest
  #   needs: docker
  #   steps:
  #     - name: Authenticate to Docker
  #       if: ${{ env.DOCKER_TOKEN != '' }}
  #       uses: docker/login-action@v3
  #       with:
  #         username: nick8green
  #         password: ${{ env.DOCKER_TOKEN }}
  #       env:
  #         DOCKER_TOKEN: ${{ secrets.docker }}

  #     # Compare the image built in the pull request with the one in production
  #     - name: 🏷️ determine image tag
  #       id: tag
  #       run: |
  #         selected_tag=$(echo "$tags_string" \
  #         | grep -v 'app:cache' \
  #         | awk -F ':' '
  #             $2 ~ /^[0-9]+\.[0-9]+\.[0-9]+$/ { print "1:" $0; next }
  #             $2 == "latest" { print "2:" $0; next }
  #             { print "3:" $0 }
  #           ' \
  #         | sort \
  #         | cut -d':' -f2- \
  #         | head -n1)

  #         echo "Selected tag: $selected_tag"
  #         echo "tag=$selected_tag" >> "$GITHUB_OUTPUT"

  #     - name: Docker Scout
  #       id: docker-scout
  #       if: ${{ env.DOCKER_TOKEN != '' }}
  #       uses: docker/scout-action@v1
  #       with:
  #         command: compare
  #         image: ${{ steps.tag.outputs.tag }}
  #         to-env: production
  #         ignore-unchanged: true
  #         # only-severities: critical,high
  #         github-token: ${{ secrets.password }}
  #       env:
  #         DOCKER_TOKEN: ${{ secrets.docker }}

  security:
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ inputs.push && inputs.registry == 'ghcr.io' }}
    name: 🔍 check image for vulnerabilities
    steps:
      - name: 🛎️ checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🕵 Run Snyk to check Docker image for vulnerabilities
        if: ${{ env.SNYK_TOKEN != '' }}
        # continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk }}
        with:
          image: ${{ inputs.registry }}/${{ inputs.reference }}
          args: --file=${{ inputs.file }}

      - name: 💾 Upload result to GitHub Code Scanning
        if: ${{ env.SNYK_TOKEN != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.snyk }}
